
<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>

<head>
 <meta name="keywords" content="Yaws"/>
 <title>Yaws</title>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
 <link rel="stylesheet" type="text/css" href="stil.css"/>
 <link rel="shortcut icon" href="icons/yaws_y.gif" type="image/x-icon"/>
</head>

<body>



<div class="logo">
   <img src="icons/yaws_head.gif" width="600" alt="YAWS"/>
</div>



<div id="sidebar">
<h4> Yaws </h4>
<div class=""> <a href="index.yaws" id="index" >Top Page</a> </div>
<div class=""> <a href="configuration.yaws" id="configuration">Build Config and Run</a></div>
<div class=""> <a href="dynamic.yaws" id="dynamic" >Dynamic Content</a> </div>
<div class=""> <a href="http://yaws.hyber.org/download/" id="download">Download </a> </div>
<div class=""> <a href="contact.yaws" id="contact">Contact </a> </div>
<div class=""> <a href="doc.yaws" id="doc">Documentation</a>  </div>
<div class=""> <a href="http://wiki.github.com/klacke/yaws" id="wiki">Wiki</a>  </div>

<h4> Examples </h4>
<div class=""> <a href="json_intro.yaws">AJAX/JSON RPC</a></div>
<div class=""> <a href="appmods.yaws">Appmods</a> </div>
<div class=""> <a href="arg.yaws">Arg</a> </div>
<div class=""> <a href="privbind.yaws">Binding to Privileged Ports</a></div>
<div class=""> <a href="bindings.yaws">Bindings</a> </div>
<div class=""> <a href="cgi.yaws">CGI</a></div>
<div class=""> <a href="session.yaws">Cookie Sessions</a>   </div>
<div class=""> <a href="cookies.yaws">Cookies</a>  </div>
<div class=""> <a href="dynamic.yaws">Dynamic Content</a> </div>
<div class=""> <a href="embed.yaws">Embedding Yaws</a></div>
<div class=""> <a href="upload0.yaws">File Upload</a> </div>
<div class=""> <a href="form.yaws">Forms</a> </div>
<div class=""> <a href="haxe_intro.yaws">haXe Remoting</a></div>
<div class=""> <a href="pcookie.yaws">Persistent Cookies</a> </div>
<div class=""> <a href="query.yaws">Query Part of URL</a></div>
<div class=""> <a href="redirect.yaws">Redirect</a> </div>
<div class=""> <a href="server_sent_events.yaws">Server-Sent Events</a> </div>
<div class=""> <a href="ssi.yaws">Server Side Includes</a> </div>
<div class="choosen"> <a href="simple.yaws">Simple</a> </div>
<div class=""> <a href="soap_intro.yaws">SOAP with Yaws</a></div>
<div class=""> <a href="stream.yaws">Streaming Data</a> </div>
<div class=""> <a href="websockets.yaws">Web Sockets</a> </div>
<a href="shoppingcart/index.yaws">Tiny Shopping Cart</a>
<div class=""> <a href="yapp_intro.yaws">Yaws Applications (yapps)</a></div>
<div class=""> <a href="logger_mod.yaws">Write Your Own Logger</a></div>

<h4> Misc </h4>
<div class=""> <a href="internals.yaws">Internals</a> </div>



</div>






<div id="entry">
  <h2>Hello world</h2>

  <p>
    The absolutely most simple example is a HTML file which doesn't contain
    any embedded erlang code at all.
  </p>

  <p>
    The file <a href="simple_ex1.yaws">simple_ex1.yaws</a> contains the following
    HTML code.
  </p>

  <br><br>
<div class="box"> <pre>
&lt;html&gt;

&lt;h1&gt;Hello world &lt;/h1&gt;

&lt;/html&gt;


</pre></div>
<br>




<p>
  Since the file has the suffix <tt>.yaws</tt>, the file will be processed
  by the Yaws dynamic compiler, but since no embeddded erlang code is found,
  the data from the file will be delivered untouched.</p>


<h2> Hello world again </h2>

<p>
  The file <a href="simple_ex2.yaws">simple_ex2.yaws</a> contains the following
  HTML code.</p>

<br><br>
<div class="box"> <pre>
&lt;html&gt;


&lt;h1&gt; Yesssssss &lt;/h1&gt;

&lt;erl&gt;
out(Arg) -&gt; {html, &quot;&lt;h2&gt; Hello again &lt;/h2&gt;&quot;}.
&lt;/erl&gt;


&lt;/html&gt;

</pre></div>
<br>





<p>
  The file has one very simple function which just returns a tuple
  <tt>{ok, String} </tt></p>
<p>

  The String will be substituted into the delivered HTML data instead of the
  Erlang code.</p>


<h2> And yet again </h2>
<p>
  The file <a href="simple_ex2.yaws">simple_ex2.yaws</a> returns
  html embedded as a string. A tighter coupling to Erlang is
  provided by a construct known as "ehtml".
  As in <a href="simple_ex3.yaws">simple_ex3.yaws as ehtml</a>
</p>

<br><br>
<div class="box"> <pre>
&lt;html&gt;


&lt;h1&gt; Yesssssss &lt;/h1&gt;

&lt;erl&gt;
out(Arg) -&gt; {ehtml, [{h2, [{class, &quot;foo&quot;}],  &quot;Hello yet again&quot;}]}.
&lt;/erl&gt;


&lt;/html&gt;

</pre></div>
<br>






<h2>Print the #arg record</h2>
<p> When writing yaws code, all classic erlang libraries are available,
however, the module <tt>yaws_api</tt> which is included in the load path
for yaws modules contains an number of usefule functions, here is a small
example in <a href="simple_ex4.yaws">simple_ex4.yaws</a>
</p>


<br><br>
<div class="box"> <pre>
&lt;html&gt;


&lt;h1&gt; simple ex 3&lt;/h1&gt;

&lt;erl&gt;
out(Arg) -&gt; {html, f(&quot;Printing the arg structure :&quot;
                     &quot;~n&lt;pre&gt;~p~n&lt;/pre&gt;~n&quot;, [Arg])}.
&lt;/erl&gt;


&lt;/html&gt;

</pre></div>
<br>



<p>The above code illustrates two points:

<ul>

<li>
<p>
The function <tt>f/1</tt> which is available in the <tt>yaws_api</tt>
module. It's just a shortcut convenience to <tt>io_lib:format/2</tt>. The
  <tt>yaws_api</tt> module contains many convenience functiond for yaws coders.</p></li>

<li>
<p>
The second point is a printout of the #arg record which is passed
to the <tt>out/1</tt> function. If you take the time to work with yaws,
the Arg passed to the out/1 functions will become very familiar.
It is the main mechanism which is used to pass data from the webserver to
  the application. </p></li>
</ul>


</div>



<div class="logo">
<img src="icons/yaws_pb.gif" alt="pbyaws" />
</div>


 <p>
      <a href="http://validator.w3.org/check?uri=referer"><img
          src="http://www.w3.org/Icons/valid-xhtml10"
          alt="Valid XHTML 1.0!" height="31" width="88" /></a>
    </p>


</body>
</html>


<!-- Localized -->